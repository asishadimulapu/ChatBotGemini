{"version":3,"sources":["authController.js"],"names":["bcrypt","require","jwt","exports","register","req","res","_req$body","name","email","password","hashed","regeneratorRuntime","async","_context","prev","next","body","awrap","User","findOne","sent","abrupt","status","json","msg","hash","create","t0","message","stop","user","compare","token","sign","userId","_id","process","env","JWT_SECRET","id","_context2"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,YACjBC,IAAMD,QAAQ,gBADdD,KAASC,QAAQ,kBACvBE,QAASC,SAAW,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAR,EACpBF,EAAAY,KAAahB,EADOM,EACPN,KAAOQ,EADAF,EACAE,MAACC,EADDH,EACCG,SADDI,EAAAE,KAAA,EAAAJ,mBAAAM,MAMKC,KAAKC,QAAQ,CAAEX,MAAAA,KANpB,KAAA,EAAA,GAAAK,EAAAO,KAAA,OAAAP,EAAAQ,OAAA,SAGDhB,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,IAAA,yBAHCX,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAM,MASKlB,OAAO0B,KAAKhB,EAAU,KAT3B,KAAA,EAAA,OASVC,EATUG,EAAAO,KAAAP,EAAAE,KAAA,GAAAJ,mBAAAM,MAGDC,KAAAQ,OAAA,CAAAnB,KAAAA,EAAAC,MAAAA,EAAAC,SAAAC,KAHC,KAAA,GAAAG,EAAAO,KAGDf,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,IAAA,iCAHCX,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,MAAA,GAGDR,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,IAAAX,EAAAc,GAAAC,UAHC,KAAA,GAAA,IAAA,MAAA,OAAAf,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAMoBrB,QAAAA,MAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAcRJ,EAAIY,KAAxBR,EAd4BA,EAc5BA,MAAOC,EAdqBD,EAcrBC,SAdqBD,EAAAA,KAAAA,EAAAA,mBAAAA,MAHrBU,KAAAC,QAAA,CAAAX,MAAAA,KAGqBA,KAAAA,EAAAA,GAHrBsB,EAGqBtB,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAHrBH,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,IAAA,yBAGqBhB,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAHrBT,OAAAgC,QAAAtB,EAAAqB,EAAArB,WAGqBD,KAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAHrBH,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,IAAA,yBAGqBhB,KAAAA,GAHrBwB,EAAA/B,IAAAgC,KAAA,CAAAC,OAAAJ,EAAAK,KAAAC,QAAAC,IAAAC,YAyBfjC,EAAIkB,KAAK,CAAES,MAAAA,EAAOF,KAAM,CAAES,GAAIT,EAAKK,IAAK5B,KAAMuB,EAAKvB,QAtBfC,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GACMgB,EAAAA,OAAG,KAAED,KAAA,CAAAC,IAAAgB,EAAAb,GAAAC,UADXpB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA","file":"authController.min.js","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\n\r\nexports.register = async (req, res) => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    const exists = await User.findOne({ email });\r\n    if (exists) return res.status(400).json({ msg: 'User already exists' });\r\n\r\n    const hashed = await bcrypt.hash(password, 10);\r\n    const user = await User.create({ name, email, password: hashed });\r\n\r\n    res.status(201).json({ msg: 'User registered successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ msg: err.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ msg: 'Invalid credentials' });\r\n\r\n    const match = await bcrypt.compare(password, user.password);\r\n    if (!match) return res.status(400).json({ msg: 'Invalid credentials' });\r\n\r\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);\r\n    res.json({ token, user: { id: user._id, name: user.name } });\r\n  } catch (err) {\r\n    res.status(500).json({ msg: err.message });\r\n  }\r\n};\r\n"]}