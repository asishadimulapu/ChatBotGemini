{"version":3,"sources":["authController.js"],"names":["bcrypt","require","jwt","User","exports","register","req","res","body","name","email","password","findOne","exists","status","json","msg","hash","hashed","create","user","message","login","compare","match","token","sign","userId","_id","process","env","JWT_SECRET","id"],"mappings":"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","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\n\r\nexports.register = async (req, res) => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    const exists = await User.findOne({ email });\r\n    if (exists) return res.status(400).json({ msg: 'User already exists' });\r\n\r\n    const hashed = await bcrypt.hash(password, 10);\r\n    const user = await User.create({ name, email, password: hashed });\r\n\r\n    res.status(201).json({ msg: 'User registered successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ msg: err.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ msg: 'Invalid credentials' });\r\n\r\n    const match = await bcrypt.compare(password, user.password);\r\n    if (!match) return res.status(400).json({ msg: 'Invalid credentials' });\r\n\r\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);\r\n    res.json({ token, user: { id: user._id, name: user.name } });\r\n  } catch (err) {\r\n    res.status(500).json({ msg: err.message });\r\n  }\r\n};\r\n"],"file":"authController.dev.js"}